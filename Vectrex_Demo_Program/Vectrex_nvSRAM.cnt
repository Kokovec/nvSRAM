BANK 0
EQU $00 
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_b
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $0228 message_Y
LABEL $025D img_persistence_counter
LABEL $0262 button_4_state
EQU $30 main
LABEL $0229 message_1
LABEL $0236 message_2
LABEL $023F message_3
LABEL $0248 message_4
LABEL $00BE check_buttons
LABEL $025E img_direction_main
LABEL $00AD main_screen_up
LABEL $00BB main_screen_end_loop
LABEL $00BE check_button_4
LABEL $01F4 get_button
LABEL $00C8 check_button_1
LABEL $0263 last_state
LABEL $00D7 check_button_2
LABEL $00F8 show_fury
LABEL $00E6 check_button_3
LABEL $014C show_zanti
LABEL $00F5 back_to_main_loop
LABEL $01A0 show_nikki
LABEL $0257 fury_img_XY
LABEL $033A fury1_data
LABEL $026B draw_raster_image
LABEL $0142 show_fury_loop
LABEL $025F img_direction_fury
LABEL $0135 fury_up
LABEL $0259 zanti_img_XY
LABEL $09BC sectoid_data
LABEL $0196 show_zanti_loop
LABEL $0260 img_direction_zanti
LABEL $0189 zanti_up
LABEL $025B nikki_img_XY
LABEL $0C05 Niiki_face_1_data
LABEL $01EA show_nikki_loop
LABEL $0261 img_direction_nikki
LABEL $01DD nikki_up
LABEL $0222 get_button_end
LABEL $0203 get_button_2
LABEL $020B get_button_3
LABEL $0213 get_button_4
LABEL $0264 exit_raster_early
LABEL $0292 nextForwardLine
LABEL $02A0 oneShiftOutForward
LABEL $02A6 dummy1
LABEL $02E1 dummy3
LABEL $02EF oneShiftOutBackward
LABEL $02F5 dummy2
LABEL $0333 exit_raster_late
LABEL $11E3 *
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 Vectrex nvSRAM Demo program (by Dan Siewers)
COMMENT_LINE $0000 This program doesn't make use of User RAM.
COMMENT_LINE $0000 Instead, it uses what is normaly Vctrex ROM space for RAM.
COMMENT_LINE $0000 This program won't work with a PROM, must use some type of SRAM
COMMENT_LINE $0000 When using ith nvSRAM, variable states will be maintained between power cycles
COMMENT_LINE $0000 This program is free software: you can redistribute it and/or modify
COMMENT_LINE $0000 it under the terms of the GNU General Public License as published by
COMMENT_LINE $0000 the Free Software Foundation, either version 3 of the License, or
COMMENT_LINE $0000 (at your option) any later version.
COMMENT_LINE $0000 This program is distributed in the hope that it will be useful,
COMMENT_LINE $0000 but WITHOUT ANY WARRANTY; without even the implied warranty of
COMMENT_LINE $0000 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
COMMENT_LINE $0000 GNU General Public License for more details.
COMMENT_LINE $0000 You should have received a copy of the GNU General Public License
COMMENT_LINE $0000 along with this program.  If not, see <https://www.gnu.org/licenses/>.
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 load vectrex bios routine definitions
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 Variable / RAM SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 insert your variables (RAM usage) in the BSS section
COMMENT_LINE $0000 user RAM starts at $c880... but...
COMMENT_LINE $0000 This program doesn't use RAM outside of the Vectrex BIOS functions
COMMENT_LINE $0000 With nvSRAM, we don't need no stinkin' user RAM!
COMMENT $0000 start of our ram space
COMMENT_LINE $C880 ***************************************************************************
COMMENT_LINE $C880 HEADER SECTION
COMMENT_LINE $C880 ***************************************************************************
COMMENT_LINE $C880 The cartridge ROM starts at address 0
COMMENT_LINE $0000 the first few bytes are mandatory, otherwise the BIOS will not load
COMMENT_LINE $0000 the ROM file, and will start MineStorm instead
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $001D end of game header
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $001E CODE SECTION
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $001E here the cartridge program starts off
COMMENT $001E set initial button state
FORCE_SYMBOL $001E Read_Btns
COMMENT $0021 top of main screen text
FORCE_NO_SYMBOL $0021
FORCE_SYMBOL $0023 message_Y
COMMENT $0026 set text move counter
FORCE_NO_SYMBOL $0026
FORCE_SYMBOL $0028 img_persistence_counter
COMMENT $002B set zero state of button 4
FORCE_NO_SYMBOL $002B
FORCE_SYMBOL $002D button_4_state
COMMENT $0030 Vectrex BIOS recalibration
FORCE_SYMBOL $0030 Wait_Recal
COMMENT $0033 Sets the intensity of the
FORCE_SYMBOL $0033 Intensity_5F
COMMENT_LINE $0036 vector beam to $5f
COMMENT $0036 set hight of image
FORCE_NO_SYMBOL $0036
FORCE_SYMBOL $0038 Vec_Text_Height
COMMENT $003B set width of image
FORCE_NO_SYMBOL $003B
FORCE_SYMBOL $003D Vec_Text_Width
COMMENT $0040 get Y position of first row of text
FORCE_SYMBOL $0040 message_Y
COMMENT $0043 save it
COMMENT $0045 X position of first row of text
COMMENT $0047 move to that position
FORCE_SYMBOL $0047 Moveto_d
COMMENT $004A display top row message
FORCE_SYMBOL $004A message_1
FORCE_SYMBOL $004D Print_Str
COMMENT $0050 line feed for next line of text
FORCE_SYMBOL $0052 message_Y
COMMENT $0055 save Y position of next line of text
FORCE_SYMBOL $0055 message_Y
COMMENT $0058 X position for next line of text
COMMENT $005A move to that position
FORCE_SYMBOL $005A Moveto_d
COMMENT $005D display next line of text
FORCE_SYMBOL $005D message_2
FORCE_SYMBOL $0060 Print_Str
COMMENT $0063 line feed for next line of text
FORCE_SYMBOL $0065 message_Y
COMMENT $0068 save Y position of next line of text
FORCE_SYMBOL $0068 message_Y
COMMENT $006B X position for next line of text
COMMENT $006D move to that position
FORCE_SYMBOL $006D Moveto_d
COMMENT $0070 display next line of text
FORCE_SYMBOL $0070 message_3
FORCE_SYMBOL $0073 Print_Str
COMMENT $0076 line feed for next line of text
FORCE_SYMBOL $0078 message_Y
COMMENT $007B save Y position of next line of text
FORCE_SYMBOL $007B message_Y
COMMENT $007E X position for next line of text
COMMENT $0080 move to that position
FORCE_SYMBOL $0080 Moveto_d
COMMENT $0083 display next line of text
FORCE_SYMBOL $0083 message_4
FORCE_SYMBOL $0086 Print_Str
COMMENT $0089 get back original Y position of top line of text
FORCE_SYMBOL $008B message_Y
COMMENT $008E increment the delay counter
FORCE_SYMBOL $008E img_persistence_counter
COMMENT $0091 counter done?
COMMENT $0093 yes, reset counter
FORCE_NO_SYMBOL $0093
FORCE_SYMBOL $0095 img_persistence_counter
COMMENT $0098 what's the current direction of text movement?
FORCE_SYMBOL $0098 img_direction_main
COMMENT $009B going up
COMMENT $009D going down, keep going down
FORCE_SYMBOL $009D message_Y
FORCE_SYMBOL $00A0 message_Y
COMMENT $00A3 reached bottom of screen?
COMMENT $00A5 nope keep moving down
COMMENT $00A7 yes, time to go back up
FORCE_SYMBOL $00A7 img_direction_main
COMMENT $00AA make sure we aren't too far down
COMMENT $00AB go display text
COMMENT $00AD move text up by one line
FORCE_SYMBOL $00AD message_Y
FORCE_SYMBOL $00B0 message_Y
COMMENT $00B3 have we reached top of screen?
FORCE_NO_SYMBOL $00B3
COMMENT $00B5 no, keep moving up
COMMENT $00B7 yes, flag that we are moving down
FORCE_SYMBOL $00B7 img_direction_main
COMMENT $00BA make sure we aren't too far down
COMMENT $00BB save the new text Y position
FORCE_SYMBOL $00BB message_Y
COMMENT $00BE get status of all buttons
FORCE_SYMBOL $00BE get_button
COMMENT $00C1 button 4 pressed?
FORCE_NO_SYMBOL $00C1
COMMENT $00C3 nope, keep checking
COMMENT $00C5 yep, get last image shown
FORCE_SYMBOL $00C5 last_state
COMMENT $00C8 button 1 pressed from last check?
FORCE_NO_SYMBOL $00C8
COMMENT $00CA nope, keep checking
COMMENT $00CC save this button press
FORCE_SYMBOL $00CC last_state
COMMENT $00CF reset the draw persistence counter
FORCE_NO_SYMBOL $00CF
FORCE_SYMBOL $00D1 img_persistence_counter
COMMENT $00D4 show Fury logo
FORCE_SYMBOL $00D4 show_fury
COMMENT $00D7 button 2 pressed?
FORCE_NO_SYMBOL $00D7
COMMENT $00D9 nope, go check button 3
COMMENT $00DB save this button press
FORCE_SYMBOL $00DB last_state
COMMENT $00DE reset the draw persistence counter
FORCE_NO_SYMBOL $00DE
FORCE_SYMBOL $00E0 img_persistence_counter
COMMENT $00E3 show Zanti
FORCE_SYMBOL $00E3 show_zanti
COMMENT $00E6 button 3 pressed?
FORCE_NO_SYMBOL $00E6
COMMENT $00E8 nope, go back to the top of loop
COMMENT $00EA save this button press
FORCE_SYMBOL $00EA last_state
COMMENT $00ED reset the draw persistence counter
FORCE_NO_SYMBOL $00ED
FORCE_SYMBOL $00EF img_persistence_counter
COMMENT $00F2 show Nikki's beautiful face (we miss you girl)
FORCE_SYMBOL $00F2 show_nikki
COMMENT $00F5 go display text
COMMENT $00F8 Vectrex BIOS recalibration
FORCE_SYMBOL $00F8 Wait_Recal
COMMENT $00FB Sets the intensity of the
FORCE_SYMBOL $00FB Intensity_5F
COMMENT_LINE $00FE vector beam to $5f
COMMENT $00FE Text position relative Y
FORCE_SYMBOL $00FE fury_img_XY
COMMENT $0101 Text position relative X
FORCE_SYMBOL $0104 Moveto_d
COMMENT $0107 set hight of image
FORCE_SYMBOL $0109 Vec_Text_Height
COMMENT $010C set width of image
FORCE_NO_SYMBOL $010C
FORCE_SYMBOL $010E Vec_Text_Width
FORCE_SYMBOL $0111 fury1_data
COMMENT $0114 Vectrex BIOS print routine
FORCE_SYMBOL $0114 draw_raster_image
COMMENT $0117 increment wait timer
FORCE_SYMBOL $0117 img_persistence_counter
COMMENT_LINE $011A lda img_persistence_counter ; check if timer overflow
COMMENT $011A nope, keep image in same spot
COMMENT $011C yep, reset timer
FORCE_NO_SYMBOL $011C
FORCE_SYMBOL $011E img_persistence_counter
COMMENT $0121 check which direction to move image
FORCE_SYMBOL $0121 img_direction_fury
COMMENT $0124 it's up, go do that
COMMENT $0126 otherwise, it's down, move the image down
FORCE_SYMBOL $0126 fury_img_XY
COMMENT $0129 check if we are at bottom of screen
FORCE_SYMBOL $0129 fury_img_XY
COMMENT $012E nope, keep going down
COMMENT $0130 yep, we'll be going up from now on
FORCE_SYMBOL $0130 img_direction_fury
COMMENT $0135 move image up
FORCE_SYMBOL $0135 fury_img_XY
COMMENT $0138 check if hit top of screen
FORCE_SYMBOL $0138 fury_img_XY
FORCE_NO_SYMBOL $013B
COMMENT $013D nope, keep going up
COMMENT $013F yep, we'll be going down from now on
FORCE_SYMBOL $013F img_direction_fury
FORCE_SYMBOL $0142 get_button
COMMENT $0145 user hit button 4?
FORCE_NO_SYMBOL $0145
COMMENT $0147 no, keep looping
COMMENT $0149 yes, go back to main screen
FORCE_NO_SYMBOL $0149
COMMENT $014C Vectrex BIOS recalibration
FORCE_SYMBOL $014C Wait_Recal
COMMENT $014F Sets the intensity of the
FORCE_SYMBOL $014F Intensity_5F
COMMENT_LINE $0152 vector beam to $5f
COMMENT $0152 Text position relative Y
FORCE_SYMBOL $0152 zanti_img_XY
COMMENT $0155 Text position relative X
FORCE_SYMBOL $0158 Moveto_d
COMMENT $015B set hight of image
FORCE_SYMBOL $015D Vec_Text_Height
COMMENT $0160 set width of image
FORCE_NO_SYMBOL $0160
FORCE_SYMBOL $0162 Vec_Text_Width
FORCE_SYMBOL $0165 sectoid_data
COMMENT $0168 Vectrex BIOS print routine
FORCE_SYMBOL $0168 draw_raster_image
COMMENT $016B increment wait timer
FORCE_SYMBOL $016B img_persistence_counter
COMMENT $016E nope, keep image in same spot
COMMENT $0170 yep, reset timer
FORCE_NO_SYMBOL $0170
FORCE_SYMBOL $0172 img_persistence_counter
COMMENT $0175 check which direction to move image
FORCE_SYMBOL $0175 img_direction_zanti
COMMENT $0178 it's up, go do that
COMMENT $017A otherwise, it's down, move the image down
FORCE_SYMBOL $017A zanti_img_XY
COMMENT $017D check if we are at bottom of screen
FORCE_SYMBOL $017D zanti_img_XY
COMMENT $0182 nope, keep going down
COMMENT $0184 yep, we'll be going up from now on
FORCE_SYMBOL $0184 img_direction_zanti
COMMENT $0189 move image up
FORCE_SYMBOL $0189 zanti_img_XY
COMMENT $018C check if hit top of screen
FORCE_SYMBOL $018C zanti_img_XY
FORCE_NO_SYMBOL $018F
COMMENT $0191 nope, keep going up
COMMENT $0193 yep, we'll be going down from now on
FORCE_SYMBOL $0193 img_direction_zanti
FORCE_SYMBOL $0196 get_button
COMMENT $0199 user hit button 4?
FORCE_NO_SYMBOL $0199
COMMENT $019B no, keep looping
COMMENT $019D yes, go back to main screen
FORCE_NO_SYMBOL $019D
COMMENT $01A0 Vectrex BIOS recalibration
FORCE_SYMBOL $01A0 Wait_Recal
COMMENT $01A3 Sets the intensity of the
FORCE_SYMBOL $01A3 Intensity_5F
COMMENT_LINE $01A6 vector beam to $5f
COMMENT $01A6 Text position relative Y
FORCE_SYMBOL $01A6 nikki_img_XY
COMMENT $01A9 Text position relative X
FORCE_SYMBOL $01AC Moveto_d
COMMENT $01AF set hight of image
FORCE_SYMBOL $01B1 Vec_Text_Height
COMMENT $01B4 set width of image
FORCE_NO_SYMBOL $01B4
FORCE_SYMBOL $01B6 Vec_Text_Width
FORCE_SYMBOL $01B9 Niiki_face_1_data
COMMENT $01BC Vectrex BIOS print routine
FORCE_SYMBOL $01BC draw_raster_image
COMMENT $01BF increment wait timer
FORCE_SYMBOL $01BF img_persistence_counter
COMMENT $01C2 nope, keep image in same spot
COMMENT $01C4 yep, reset timer
FORCE_NO_SYMBOL $01C4
FORCE_SYMBOL $01C6 img_persistence_counter
COMMENT $01C9 check which direction to move image
FORCE_SYMBOL $01C9 img_direction_nikki
COMMENT $01CC it's up, go do that
COMMENT $01CE otherwise, it's down, move the image down
FORCE_SYMBOL $01CE nikki_img_XY
COMMENT $01D1 check if we are at bottom of screen
FORCE_SYMBOL $01D1 nikki_img_XY
COMMENT $01D6 nope, keep going down
COMMENT $01D8 yes, we'll be going up from now on
FORCE_SYMBOL $01D8 img_direction_nikki
COMMENT $01DD move image up
FORCE_SYMBOL $01DD nikki_img_XY
COMMENT $01E0 check if hit top of screen
FORCE_SYMBOL $01E0 nikki_img_XY
FORCE_NO_SYMBOL $01E3
COMMENT $01E5 nope, keep going up
COMMENT $01E7 yep, we'll be going down from now on
FORCE_SYMBOL $01E7 img_direction_nikki
FORCE_SYMBOL $01EA get_button
COMMENT $01ED user hit button 4?
FORCE_NO_SYMBOL $01ED
COMMENT $01EF no, keep looping
COMMENT $01F1 yes, go back to main screen
FORCE_NO_SYMBOL $01F1
COMMENT $01F4 get button status
FORCE_SYMBOL $01F4 Read_Btns
COMMENT $01F7 is a button pressed?
FORCE_NO_SYMBOL $01F7
COMMENT $01F9 no, return
COMMENT $01FB button 1 pressed?
FORCE_NO_SYMBOL $01FB
COMMENT $01FD nope, check next button
FORCE_NO_SYMBOL $01FF
COMMENT $0203 button 2 pressed?
FORCE_NO_SYMBOL $0203
COMMENT $0205 nope, check next button
FORCE_NO_SYMBOL $0207
COMMENT $020B button 3 pressed?
FORCE_NO_SYMBOL $020B
COMMENT $020D nope, check next button
FORCE_NO_SYMBOL $020F
COMMENT $0213 button 4 pressed?
FORCE_NO_SYMBOL $0213
COMMENT $0215 nope, we're done here
COMMENT $0217 check if button still being pressed from last screen
FORCE_SYMBOL $0217 button_4_state
COMMENT $021A yep, we're done here
COMMENT $021C nope, it's a new button press
FORCE_NO_SYMBOL $021C
COMMENT $021E save it
FORCE_SYMBOL $021E button_4_state
COMMENT $0221 go back to calling routine
COMMENT $0222 flag no button press
FORCE_NO_SYMBOL $0222
FORCE_SYMBOL $0224 button_4_state
COMMENT_LINE $0228 *********************************************************************
COMMENT_LINE $0228 These variables are kept in what is normally Vectrex ROM space
COMMENT_LINE $0228 SRAM allows for reads and writes to this space, all is RAM
COMMENT_LINE $0228 These variables will keep their state after power has been removed
COMMENT_LINE $0228 **********************************************************************
COMMENT $0257 Y,X location of Fury Logo (
COMMENT $0259 Y,X location of Zanti Logo
COMMENT $025B Y,X location of Nikki image
COMMENT $025D image movement speed (0 = slowest, 255 = fastes)
COMMENT $025E 0 = Down, 1 = Up
COMMENT $025F 0 = Down, 1 = Up
COMMENT $0260 0 = Down, 1 = Up
COMMENT $0261 0 = Down, 1 = Up
COMMENT $0262 flag for state of button 1 at last check (0 = not pressed, 1 = was pressed)
COMMENT $0263 the last image shown, follows buttons pattern (1,2,3)
COMMENT_LINE $0264 ***************************************************************************
COMMENT_LINE $0264 DATA SECTION
COMMENT_LINE $0264 ***************************************************************************
COMMENT_LINE $0264 expects width strength to be = to the default bios location Vec_Text_Width
COMMENT_LINE $0264 expects height strength to be = to the default bios location Vec_Text_Height
COMMENT_LINE $0264 address of raster data is expected in U
COMMENT_LINE $0264 print is done to current screen location
COMMENT_LINE $0264 uses bios ram-locations  Vec_Counter_1,  Vec_Counter_2,  Vec_Counter_3
COMMENT_LINE $0264 as temporary storages
COMMENT $0264 EXIT routine
FORCE_NO_SYMBOL $0264
COMMENT $0266 T1->PB7 enabled
FORCE_SYMBOL $0266 VIA_aux_cntl
COMMENT $0268 Reset the zero reference
FORCE_SYMBOL $0268 Reset0Ref
COMMENT $026D height counter
FORCE_SYMBOL $026D Vec_Counter_1
COMMENT $0272 width counter
FORCE_SYMBOL $0272 Vec_Counter_2
COMMENT $0275 width counter (work)
FORCE_SYMBOL $0275 Vec_Counter_3
COMMENT_LINE $0278 setup VIA raster routine
COMMENT_LINE $0278 step 1
COMMENT_LINE $0278 reset X, Y integrator offset values
COMMENT_LINE $0278 setup rampin with auxControl
COMMENT $0278 a = $18, b = $83 disable RAMP, muxsel=false, channel 1 (integrators offsets)
FORCE_NO_SYMBOL $0278
COMMENT $027B Clear D/A output
FORCE_SYMBOL $027B VIA_port_a
COMMENT $027D $18: T1 OneSHotMode WITHOUT Ramp control, Shift out under System clock
FORCE_SYMBOL $027D VIA_aux_cntl
COMMENT $027F set mux to channel 1,
FORCE_SYMBOL $027F VIA_port_b
COMMENT $0281 set "b" setting to orb
FORCE_SYMBOL $0281 VIA_port_b
COMMENT $0283 a = $80, b = $81 prepare next orb configuration
FORCE_NO_SYMBOL $0283
COMMENT $0286 Wait a moment
COMMENT $0287 Disable mux
FORCE_SYMBOL $0287 VIA_port_b
COMMENT_LINE $0289 step 2
COMMENT_LINE $0289 VIA_ORA is 0
COMMENT_LINE $0289 integrator y = 0
COMMENT $0289 disable RAMP, set mux to channel 0 (muxsel = false)
FORCE_SYMBOL $0289 VIA_port_b
COMMENT $028B enable mux
FORCE_SYMBOL $028B VIA_port_b
COMMENT $028D I think this is a delay only
FORCE_NO_SYMBOL $028D
COMMENT $0290 disable mux
FORCE_SYMBOL $0290 VIA_port_b
COMMENT_LINE $0292 step 3
COMMENT_LINE $0292 output each line!
COMMENT $0292 get width
FORCE_SYMBOL $0292 Vec_Text_Width
COMMENT $0295 Send it to the D/A
FORCE_SYMBOL $0295 VIA_port_a
COMMENT $0297 a = $01
FORCE_NO_SYMBOL $0297
COMMENT $0299 Enable RAMP, disable mux
FORCE_SYMBOL $0299 VIA_port_b
COMMENT_LINE $029B output is ongoing! (RAMP is enabled)
COMMENT $029B [5]
FORCE_SYMBOL $029B Vec_Counter_3
COMMENT $029E [2] wait
COMMENT $029F [2] wait
COMMENT $02A0 [6] get bitmap (shiftreg-data) from raster table
COMMENT $02A2 [4] This loop needs to have exactly 18 cycles (8*2+2)
FORCE_SYMBOL $02A2 VIA_shift_reg
COMMENT_LINE $02A4 one complete shiftreg output takes 16 cycles (8*2) + 2 cycles since VIA needs some rest
COMMENT $02A4 [3]
COMMENT $02A6 [2]
COMMENT $02A7 [3] go back if not done for line
COMMENT $02A9 [2]
FORCE_NO_SYMBOL $02A9
COMMENT $02AB [2] delay 2 to finish last shiftout
COMMENT $02AC [4] disable RAMP, disable mux
FORCE_SYMBOL $02AC VIA_port_b
COMMENT $02AE dac = 0
FORCE_SYMBOL $02AE VIA_port_a
COMMENT $02B0 check for last row
FORCE_SYMBOL $02B0 Vec_Counter_1
COMMENT $02B3 branch if last row
COMMENT_LINE $02B5 prepare going backwards next rasterline
COMMENT_LINE $02B5 0 ref - avoids woble on large images
COMMENT $02B5 ramp still off, mux sel = 1, mux disable
FORCE_NO_SYMBOL $02B5
COMMENT $02B7 put to orb
FORCE_SYMBOL $02B7 VIA_port_b
COMMENT $02B9 mux enable
FORCE_SYMBOL $02B9 VIA_port_b
COMMENT $02BB get height to a
FORCE_SYMBOL $02BB Vec_Text_Height
COMMENT $02BE mux disable
FORCE_SYMBOL $02BE VIA_port_b
COMMENT $02C0 enable mux
FORCE_SYMBOL $02C0 VIA_port_b
COMMENT $02C2 put y speed to  dac
FORCE_SYMBOL $02C2 VIA_port_a
COMMENT $02C4 for the way back take the "negative" x-direction
FORCE_SYMBOL $02C4 Vec_Text_Width
COMMENT $02C7 disable mux
FORCE_SYMBOL $02C7 VIA_port_b
COMMENT $02C9 x should not be integrating!
FORCE_SYMBOL $02C9 VIA_port_a
COMMENT $02CB a= enable ramp, disable mux
FORCE_NO_SYMBOL $02CB
COMMENT $02CD set it to orb
FORCE_SYMBOL $02CD VIA_port_b
COMMENT_LINE $02CF now we are going down a little bit
COMMENT $02CF ?
COMMENT $02D0 ?
COMMENT $02D1 disable ramp, disable mux (muxsel = Y)
FORCE_NO_SYMBOL $02D1
COMMENT $02D3 set it to orb
FORCE_SYMBOL $02D3 VIA_port_b
COMMENT $02D5 clear D/A, (Y integration = 0)
FORCE_SYMBOL $02D5 VIA_port_a
COMMENT $02D7 enable mux
FORCE_SYMBOL $02D7 VIA_port_b
COMMENT $02D9 width of one line
FORCE_SYMBOL $02D9 Vec_Counter_2
COMMENT $02DC reset output counter
FORCE_SYMBOL $02DC Vec_Counter_3
COMMENT $02DF disable mux
FORCE_SYMBOL $02DF VIA_port_b
COMMENT_LINE $02E1 bra dummy3 ; if bra is done, cycles for forward and backword are exactly the same
COMMENT $02E1 get x speed (going back)
FORCE_SYMBOL $02E1 Vec_Text_Width
COMMENT $02E4 send it to the D/A
FORCE_SYMBOL $02E4 VIA_port_a
COMMENT $02E6 a = $01
FORCE_NO_SYMBOL $02E6
COMMENT $02E8 enable RAMP, disable mux
FORCE_SYMBOL $02E8 VIA_port_b
COMMENT_LINE $02EA output is ongoing! (RAMP is enabled)
COMMENT $02EA [5]
FORCE_SYMBOL $02EA Vec_Counter_3
COMMENT $02ED [2]
COMMENT $02EE [2]
COMMENT $02EF [6] get bitmap from raster table
COMMENT $02F1 [4] this loop needs to have exactly 18 cycles (8*2+2)
FORCE_SYMBOL $02F1 VIA_shift_reg
COMMENT $02F3 [3]
COMMENT $02F5 [2]
COMMENT $02F6 [3] go back if not finished
COMMENT $02F8 [2]
FORCE_NO_SYMBOL $02F8
COMMENT $02FA [2] delay 2 to finish last shiftout
COMMENT $02FB [4] disable RAMP, disable mux
FORCE_SYMBOL $02FB VIA_port_b
COMMENT $02FD dac = 0
FORCE_SYMBOL $02FD VIA_port_a
COMMENT $02FF check for last row
FORCE_SYMBOL $02FF Vec_Counter_1
COMMENT $0302 branch if last row
COMMENT_LINE $0304 prepare going forward next rasterline
COMMENT_LINE $0304 0 ref - avoids woble on large images
COMMENT $0304 ramp still off, mux sel = 1, mux disable
FORCE_NO_SYMBOL $0304
COMMENT $0306 put to orb
FORCE_SYMBOL $0306 VIA_port_b
COMMENT $0308 mux enable
FORCE_SYMBOL $0308 VIA_port_b
COMMENT $030A get height to a
FORCE_SYMBOL $030A Vec_Text_Height
COMMENT $030D mux disable
FORCE_SYMBOL $030D VIA_port_b
COMMENT $030F enable mux
FORCE_SYMBOL $030F VIA_port_b
COMMENT $0311 put it to dac
FORCE_SYMBOL $0311 VIA_port_a
COMMENT $0313 for the way back take the "negative" x-direction
FORCE_SYMBOL $0313 Vec_Text_Width
COMMENT $0316 disable mux
FORCE_SYMBOL $0316 VIA_port_b
COMMENT $0318 x should not be integrating!
FORCE_SYMBOL $0318 VIA_port_a
COMMENT $031A a= enable ramp, disable mux
FORCE_NO_SYMBOL $031A
COMMENT $031C set it to orb
FORCE_SYMBOL $031C VIA_port_b
COMMENT_LINE $031E now we are going down a little bit
COMMENT $031E ?
COMMENT $031F ?
COMMENT $0320 disable ramp, disable mux (muxsel = Y)
FORCE_NO_SYMBOL $0320
COMMENT $0322 set it to orb
FORCE_SYMBOL $0322 VIA_port_b
COMMENT $0324 clear D/A, (Y integration = 0)
FORCE_SYMBOL $0324 VIA_port_a
COMMENT $0326 enable mux
FORCE_SYMBOL $0326 VIA_port_b
COMMENT $0328 width of one line
FORCE_SYMBOL $0328 Vec_Counter_2
COMMENT $032B reset output counter
FORCE_SYMBOL $032B Vec_Counter_3
COMMENT $032E disable mux
FORCE_SYMBOL $032E VIA_port_b
COMMENT $0330 go back for next scan line
COMMENT $0333 EXIT routine
FORCE_NO_SYMBOL $0333
COMMENT $0335 T1->PB7 enabled
FORCE_SYMBOL $0335 VIA_aux_cntl
COMMENT $0337 Reset the zero reference
FORCE_SYMBOL $0337 Reset0Ref
COMMENT_LINE $033A format:
COMMENT_LINE $033A height, width
COMMENT_LINE $033A shiftreg, ...,  shiftreg
COMMENT_LINE $033A ....
COMMENT_LINE $033A shiftreg, ...,  shiftreg
COMMENT_LINE $033A every second row is a 'backward' row
COMMENT_LINE $033A backward rows have the direction AND the bits reversed!
COMMENT $033C forward
COMMENT $0356 backward
COMMENT $0370 forward
COMMENT $038A backward
COMMENT $03A4 forward
COMMENT $03BE backward
COMMENT $03D8 forward
COMMENT $03F2 backward
COMMENT $040C forward
COMMENT $0426 backward
COMMENT $0440 forward
COMMENT $045A backward
COMMENT $0474 forward
COMMENT $048E backward
COMMENT $04A8 forward
COMMENT $04C2 backward
COMMENT $04DC forward
COMMENT $04F6 backward
COMMENT $0510 forward
COMMENT $052A backward
COMMENT $0544 forward
COMMENT $055E backward
COMMENT $0578 forward
COMMENT $0592 backward
COMMENT $05AC forward
COMMENT $05C6 backward
COMMENT $05E0 forward
COMMENT $05FA backward
COMMENT $0614 forward
COMMENT $062E backward
COMMENT $0648 forward
COMMENT $0662 backward
COMMENT $067C forward
COMMENT $0696 backward
COMMENT $06B0 forward
COMMENT $06CA backward
COMMENT $06E4 forward
COMMENT $06FE backward
COMMENT $0718 forward
COMMENT $0732 backward
COMMENT $074C forward
COMMENT $0766 backward
COMMENT $0780 forward
COMMENT $079A backward
COMMENT $07B4 forward
COMMENT $07CE backward
COMMENT $07E8 forward
COMMENT $0802 backward
COMMENT $081C forward
COMMENT $0836 backward
COMMENT $0850 forward
COMMENT $086A backward
COMMENT $0884 forward
COMMENT $089E backward
COMMENT $08B8 forward
COMMENT $08D2 backward
COMMENT $08EC forward
COMMENT $0906 backward
COMMENT $0920 forward
COMMENT $093A backward
COMMENT $0954 forward
COMMENT $096E backward
COMMENT $0988 forward
COMMENT $09A2 backward
COMMENT_LINE $09BC format:
COMMENT_LINE $09BC height, width
COMMENT_LINE $09BC shiftreg, ...,  shiftreg
COMMENT_LINE $09BC ....
COMMENT_LINE $09BC shiftreg, ...,  shiftreg
COMMENT_LINE $09BC every second row is a 'backward' row
COMMENT_LINE $09BC backward rows have the direction AND the bits reversed!
COMMENT $09BE forward
COMMENT $09C9 backward
COMMENT $09D4 forward
COMMENT $09DF backward
COMMENT $09EA forward
COMMENT $09F5 backward
COMMENT $0A00 forward
COMMENT $0A0B backward
COMMENT $0A16 forward
COMMENT $0A21 backward
COMMENT $0A2C forward
COMMENT $0A37 backward
COMMENT $0A42 forward
COMMENT $0A4D backward
COMMENT $0A58 forward
COMMENT $0A63 backward
COMMENT $0A6E forward
COMMENT $0A79 backward
COMMENT $0A84 forward
COMMENT $0A8F backward
COMMENT $0A9A forward
COMMENT $0AA5 backward
COMMENT $0AB0 forward
COMMENT $0ABB backward
COMMENT $0AC6 forward
COMMENT $0AD1 backward
COMMENT $0ADC forward
COMMENT $0AE7 backward
COMMENT $0AF2 forward
COMMENT $0AFD backward
COMMENT $0B08 forward
COMMENT $0B13 backward
COMMENT $0B1E forward
COMMENT $0B29 backward
COMMENT $0B34 forward
COMMENT $0B3F backward
COMMENT $0B4A forward
COMMENT $0B55 backward
COMMENT $0B60 forward
COMMENT $0B6B backward
COMMENT $0B76 forward
COMMENT $0B81 backward
COMMENT $0B8C forward
COMMENT $0B97 backward
COMMENT $0BA2 forward
COMMENT $0BAD backward
COMMENT $0BB8 forward
COMMENT $0BC3 backward
COMMENT $0BCE forward
COMMENT $0BD9 backward
COMMENT $0BE4 forward
COMMENT $0BEF backward
COMMENT $0BFA forward
COMMENT_LINE $0C05 format:
COMMENT_LINE $0C05 height, width
COMMENT_LINE $0C05 shiftreg, ...,  shiftreg
COMMENT_LINE $0C05 ....
COMMENT_LINE $0C05 shiftreg, ...,  shiftreg
COMMENT_LINE $0C05 every second row is a 'backward' row
COMMENT_LINE $0C05 backward rows have the direction AND the bits reversed!
COMMENT $0C07 forward
COMMENT $0C16 backward
COMMENT $0C25 forward
COMMENT $0C34 backward
COMMENT $0C43 forward
COMMENT $0C52 backward
COMMENT $0C61 forward
COMMENT $0C70 backward
COMMENT $0C7F forward
COMMENT $0C8E backward
COMMENT $0C9D forward
COMMENT $0CAC backward
COMMENT $0CBB forward
COMMENT $0CCA backward
COMMENT $0CD9 forward
COMMENT $0CE8 backward
COMMENT $0CF7 forward
COMMENT $0D06 backward
COMMENT $0D15 forward
COMMENT $0D24 backward
COMMENT $0D33 forward
COMMENT $0D42 backward
COMMENT $0D51 forward
COMMENT $0D60 backward
COMMENT $0D6F forward
COMMENT $0D7E backward
COMMENT $0D8D forward
COMMENT $0D9C backward
COMMENT $0DAB forward
COMMENT $0DBA backward
COMMENT $0DC9 forward
COMMENT $0DD8 backward
COMMENT $0DE7 forward
COMMENT $0DF6 backward
COMMENT $0E05 forward
COMMENT $0E14 backward
COMMENT $0E23 forward
COMMENT $0E32 backward
COMMENT $0E41 forward
COMMENT $0E50 backward
COMMENT $0E5F forward
COMMENT $0E6E backward
COMMENT $0E7D forward
COMMENT $0E8C backward
COMMENT $0E9B forward
COMMENT $0EAA backward
COMMENT $0EB9 forward
COMMENT $0EC8 backward
COMMENT $0ED7 forward
COMMENT $0EE6 backward
COMMENT $0EF5 forward
COMMENT $0F04 backward
COMMENT $0F13 forward
COMMENT $0F22 backward
COMMENT $0F31 forward
COMMENT $0F40 backward
COMMENT $0F4F forward
COMMENT $0F5E backward
COMMENT $0F6D forward
COMMENT $0F7C backward
COMMENT $0F8B forward
COMMENT $0F9A backward
COMMENT $0FA9 forward
COMMENT $0FB8 backward
COMMENT $0FC7 forward
COMMENT $0FD6 backward
COMMENT $0FE5 forward
COMMENT $0FF4 backward
COMMENT $1003 forward
COMMENT $1012 backward
COMMENT $1021 forward
COMMENT $1030 backward
COMMENT $103F forward
COMMENT $104E backward
COMMENT $105D forward
COMMENT $106C backward
COMMENT $107B forward
COMMENT $108A backward
COMMENT $1099 forward
COMMENT $10A8 backward
COMMENT $10B7 forward
COMMENT $10C6 backward
COMMENT $10D5 forward
COMMENT $10E4 backward
COMMENT $10F3 forward
COMMENT $1102 backward
COMMENT $1111 forward
COMMENT $1120 backward
COMMENT $112F forward
COMMENT $113E backward
COMMENT $114D forward
COMMENT $115C backward
COMMENT $116B forward
COMMENT $117A backward
COMMENT $1189 forward
COMMENT $1198 backward
COMMENT $11A7 forward
COMMENT $11B6 backward
COMMENT $11C5 forward
COMMENT $11D4 backward
RANGE $0000-$11D4 DP $D0
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$001D CHAR_DATA 12
RANGE $001D-$001E DB_DATA 1
RANGE $001E-$0228 CODE
RANGE $0228-$0229 DB_DATA 1
RANGE $0229-$0236 CHAR_DATA 13
RANGE $0236-$023F CHAR_DATA 9
RANGE $023F-$0248 CHAR_DATA 9
RANGE $0248-$0257 CHAR_DATA 15
RANGE $0257-$0259 DB_DATA 2
RANGE $0259-$025B DB_DATA 2
RANGE $025B-$025D DB_DATA 2
RANGE $025D-$025E DB_DATA 1
RANGE $025E-$025F DB_DATA 1
RANGE $025F-$0260 DB_DATA 1
RANGE $0260-$0261 DB_DATA 1
RANGE $0261-$0262 DB_DATA 1
RANGE $0262-$0263 DB_DATA 1
RANGE $0263-$0264 DB_DATA 1
RANGE $0264-$033A CODE
RANGE $033A-$033C DB_DATA 2
RANGE $033C-$0356 DB_DATA 26
RANGE $0356-$0370 DB_DATA 26
RANGE $0370-$038A DB_DATA 26
RANGE $038A-$03A4 DB_DATA 26
RANGE $03A4-$03BE DB_DATA 26
RANGE $03BE-$03D8 DB_DATA 26
RANGE $03D8-$03F2 DB_DATA 26
RANGE $03F2-$040C DB_DATA 26
RANGE $040C-$0426 DB_DATA 26
RANGE $0426-$0440 DB_DATA 26
RANGE $0440-$045A DB_DATA 26
RANGE $045A-$0474 DB_DATA 26
RANGE $0474-$048E DB_DATA 26
RANGE $048E-$04A8 DB_DATA 26
RANGE $04A8-$04C2 DB_DATA 26
RANGE $04C2-$04DC DB_DATA 26
RANGE $04DC-$04F6 DB_DATA 26
RANGE $04F6-$0510 DB_DATA 26
RANGE $0510-$052A DB_DATA 26
RANGE $052A-$0544 DB_DATA 26
RANGE $0544-$055E DB_DATA 26
RANGE $055E-$0578 DB_DATA 26
RANGE $0578-$0592 DB_DATA 26
RANGE $0592-$05AC DB_DATA 26
RANGE $05AC-$05C6 DB_DATA 26
RANGE $05C6-$05E0 DB_DATA 26
RANGE $05E0-$05FA DB_DATA 26
RANGE $05FA-$0614 DB_DATA 26
RANGE $0614-$062E DB_DATA 26
RANGE $062E-$0648 DB_DATA 26
RANGE $0648-$0662 DB_DATA 26
RANGE $0662-$067C DB_DATA 26
RANGE $067C-$0696 DB_DATA 26
RANGE $0696-$06B0 DB_DATA 26
RANGE $06B0-$06CA DB_DATA 26
RANGE $06CA-$06E4 DB_DATA 26
RANGE $06E4-$06FE DB_DATA 26
RANGE $06FE-$0718 DB_DATA 26
RANGE $0718-$0732 DB_DATA 26
RANGE $0732-$074C DB_DATA 26
RANGE $074C-$0766 DB_DATA 26
RANGE $0766-$0780 DB_DATA 26
RANGE $0780-$079A DB_DATA 26
RANGE $079A-$07B4 DB_DATA 26
RANGE $07B4-$07CE DB_DATA 26
RANGE $07CE-$07E8 DB_DATA 26
RANGE $07E8-$0802 DB_DATA 26
RANGE $0802-$081C DB_DATA 26
RANGE $081C-$0836 DB_DATA 26
RANGE $0836-$0850 DB_DATA 26
RANGE $0850-$086A DB_DATA 26
RANGE $086A-$0884 DB_DATA 26
RANGE $0884-$089E DB_DATA 26
RANGE $089E-$08B8 DB_DATA 26
RANGE $08B8-$08D2 DB_DATA 26
RANGE $08D2-$08EC DB_DATA 26
RANGE $08EC-$0906 DB_DATA 26
RANGE $0906-$0920 DB_DATA 26
RANGE $0920-$093A DB_DATA 26
RANGE $093A-$0954 DB_DATA 26
RANGE $0954-$096E DB_DATA 26
RANGE $096E-$0988 DB_DATA 26
RANGE $0988-$09A2 DB_DATA 26
RANGE $09A2-$09BC DB_DATA 26
RANGE $09BC-$09BE DB_DATA 2
RANGE $09BE-$09C9 DB_DATA 11
RANGE $09C9-$09D4 DB_DATA 11
RANGE $09D4-$09DF DB_DATA 11
RANGE $09DF-$09EA DB_DATA 11
RANGE $09EA-$09F5 DB_DATA 11
RANGE $09F5-$0A00 DB_DATA 11
RANGE $0A00-$0A0B DB_DATA 11
RANGE $0A0B-$0A16 DB_DATA 11
RANGE $0A16-$0A21 DB_DATA 11
RANGE $0A21-$0A2C DB_DATA 11
RANGE $0A2C-$0A37 DB_DATA 11
RANGE $0A37-$0A42 DB_DATA 11
RANGE $0A42-$0A4D DB_DATA 11
RANGE $0A4D-$0A58 DB_DATA 11
RANGE $0A58-$0A63 DB_DATA 11
RANGE $0A63-$0A6E DB_DATA 11
RANGE $0A6E-$0A79 DB_DATA 11
RANGE $0A79-$0A84 DB_DATA 11
RANGE $0A84-$0A8F DB_DATA 11
RANGE $0A8F-$0A9A DB_DATA 11
RANGE $0A9A-$0AA5 DB_DATA 11
RANGE $0AA5-$0AB0 DB_DATA 11
RANGE $0AB0-$0ABB DB_DATA 11
RANGE $0ABB-$0AC6 DB_DATA 11
RANGE $0AC6-$0AD1 DB_DATA 11
RANGE $0AD1-$0ADC DB_DATA 11
RANGE $0ADC-$0AE7 DB_DATA 11
RANGE $0AE7-$0AF2 DB_DATA 11
RANGE $0AF2-$0AFD DB_DATA 11
RANGE $0AFD-$0B08 DB_DATA 11
RANGE $0B08-$0B13 DB_DATA 11
RANGE $0B13-$0B1E DB_DATA 11
RANGE $0B1E-$0B29 DB_DATA 11
RANGE $0B29-$0B34 DB_DATA 11
RANGE $0B34-$0B3F DB_DATA 11
RANGE $0B3F-$0B4A DB_DATA 11
RANGE $0B4A-$0B55 DB_DATA 11
RANGE $0B55-$0B60 DB_DATA 11
RANGE $0B60-$0B6B DB_DATA 11
RANGE $0B6B-$0B76 DB_DATA 11
RANGE $0B76-$0B81 DB_DATA 11
RANGE $0B81-$0B8C DB_DATA 11
RANGE $0B8C-$0B97 DB_DATA 11
RANGE $0B97-$0BA2 DB_DATA 11
RANGE $0BA2-$0BAD DB_DATA 11
RANGE $0BAD-$0BB8 DB_DATA 11
RANGE $0BB8-$0BC3 DB_DATA 11
RANGE $0BC3-$0BCE DB_DATA 11
RANGE $0BCE-$0BD9 DB_DATA 11
RANGE $0BD9-$0BE4 DB_DATA 11
RANGE $0BE4-$0BEF DB_DATA 11
RANGE $0BEF-$0BFA DB_DATA 11
RANGE $0BFA-$0C05 DB_DATA 11
RANGE $0C05-$0C07 DB_DATA 2
RANGE $0C07-$0C16 DB_DATA 15
RANGE $0C16-$0C25 DB_DATA 15
RANGE $0C25-$0C34 DB_DATA 15
RANGE $0C34-$0C43 DB_DATA 15
RANGE $0C43-$0C52 DB_DATA 15
RANGE $0C52-$0C61 DB_DATA 15
RANGE $0C61-$0C70 DB_DATA 15
RANGE $0C70-$0C7F DB_DATA 15
RANGE $0C7F-$0C8E DB_DATA 15
RANGE $0C8E-$0C9D DB_DATA 15
RANGE $0C9D-$0CAC DB_DATA 15
RANGE $0CAC-$0CBB DB_DATA 15
RANGE $0CBB-$0CCA DB_DATA 15
RANGE $0CCA-$0CD9 DB_DATA 15
RANGE $0CD9-$0CE8 DB_DATA 15
RANGE $0CE8-$0CF7 DB_DATA 15
RANGE $0CF7-$0D06 DB_DATA 15
RANGE $0D06-$0D15 DB_DATA 15
RANGE $0D15-$0D24 DB_DATA 15
RANGE $0D24-$0D33 DB_DATA 15
RANGE $0D33-$0D42 DB_DATA 15
RANGE $0D42-$0D51 DB_DATA 15
RANGE $0D51-$0D60 DB_DATA 15
RANGE $0D60-$0D6F DB_DATA 15
RANGE $0D6F-$0D7E DB_DATA 15
RANGE $0D7E-$0D8D DB_DATA 15
RANGE $0D8D-$0D9C DB_DATA 15
RANGE $0D9C-$0DAB DB_DATA 15
RANGE $0DAB-$0DBA DB_DATA 15
RANGE $0DBA-$0DC9 DB_DATA 15
RANGE $0DC9-$0DD8 DB_DATA 15
RANGE $0DD8-$0DE7 DB_DATA 15
RANGE $0DE7-$0DF6 DB_DATA 15
RANGE $0DF6-$0E05 DB_DATA 15
RANGE $0E05-$0E14 DB_DATA 15
RANGE $0E14-$0E23 DB_DATA 15
RANGE $0E23-$0E32 DB_DATA 15
RANGE $0E32-$0E41 DB_DATA 15
RANGE $0E41-$0E50 DB_DATA 15
RANGE $0E50-$0E5F DB_DATA 15
RANGE $0E5F-$0E6E DB_DATA 15
RANGE $0E6E-$0E7D DB_DATA 15
RANGE $0E7D-$0E8C DB_DATA 15
RANGE $0E8C-$0E9B DB_DATA 15
RANGE $0E9B-$0EAA DB_DATA 15
RANGE $0EAA-$0EB9 DB_DATA 15
RANGE $0EB9-$0EC8 DB_DATA 15
RANGE $0EC8-$0ED7 DB_DATA 15
RANGE $0ED7-$0EE6 DB_DATA 15
RANGE $0EE6-$0EF5 DB_DATA 15
RANGE $0EF5-$0F04 DB_DATA 15
RANGE $0F04-$0F13 DB_DATA 15
RANGE $0F13-$0F22 DB_DATA 15
RANGE $0F22-$0F31 DB_DATA 15
RANGE $0F31-$0F40 DB_DATA 15
RANGE $0F40-$0F4F DB_DATA 15
RANGE $0F4F-$0F5E DB_DATA 15
RANGE $0F5E-$0F6D DB_DATA 15
RANGE $0F6D-$0F7C DB_DATA 15
RANGE $0F7C-$0F8B DB_DATA 15
RANGE $0F8B-$0F9A DB_DATA 15
RANGE $0F9A-$0FA9 DB_DATA 15
RANGE $0FA9-$0FB8 DB_DATA 15
RANGE $0FB8-$0FC7 DB_DATA 15
RANGE $0FC7-$0FD6 DB_DATA 15
RANGE $0FD6-$0FE5 DB_DATA 15
RANGE $0FE5-$0FF4 DB_DATA 15
RANGE $0FF4-$1003 DB_DATA 15
RANGE $1003-$1012 DB_DATA 15
RANGE $1012-$1021 DB_DATA 15
RANGE $1021-$1030 DB_DATA 15
RANGE $1030-$103F DB_DATA 15
RANGE $103F-$104E DB_DATA 15
RANGE $104E-$105D DB_DATA 15
RANGE $105D-$106C DB_DATA 15
RANGE $106C-$107B DB_DATA 15
RANGE $107B-$108A DB_DATA 15
RANGE $108A-$1099 DB_DATA 15
RANGE $1099-$10A8 DB_DATA 15
RANGE $10A8-$10B7 DB_DATA 15
RANGE $10B7-$10C6 DB_DATA 15
RANGE $10C6-$10D5 DB_DATA 15
RANGE $10D5-$10E4 DB_DATA 15
RANGE $10E4-$10F3 DB_DATA 15
RANGE $10F3-$1102 DB_DATA 15
RANGE $1102-$1111 DB_DATA 15
RANGE $1111-$1120 DB_DATA 15
RANGE $1120-$112F DB_DATA 15
RANGE $112F-$113E DB_DATA 15
RANGE $113E-$114D DB_DATA 15
RANGE $114D-$115C DB_DATA 15
RANGE $115C-$116B DB_DATA 15
RANGE $116B-$117A DB_DATA 15
RANGE $117A-$1189 DB_DATA 15
RANGE $1189-$1198 DB_DATA 15
RANGE $1198-$11A7 DB_DATA 15
RANGE $11A7-$11B6 DB_DATA 15
RANGE $11B6-$11C5 DB_DATA 15
RANGE $11C5-$11D4 DB_DATA 15
RANGE $11D4-$11E3 DB_DATA 15

